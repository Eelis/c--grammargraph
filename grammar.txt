keywords
  typedef-name
    identifier
  namespace-name
    identifier
    namespace-alias
  namespace-alias
    identifier
  class-name
    identifier
    simple-template-id
  enum-name
    identifier
  template-name
    identifier
lexical conventions
  hex-quad
    hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit
  universal-character-name
    "\\u" hex-quad
    "\\U" hex-quad hex-quad
  preprocessing-token
    header-name
    identifier
    pp-number
    character-literal
    user-defined-character-literal
    string-literal
    user-defined-string-literal
    preprocessing-op-or-punc
    informal: each non-white-space character that cannot be one of the above
  token
    identifier
    keyword
    literal
    operator
    punctuator
  header-name
    "<" h-char-sequence ">"
    "\"" q-char-sequence "\""
  h-char-sequence
    h-char
    h-char-sequence h-char
  h-char
    informal: any member of the source character set except new-line and >
  q-char-sequence
    q-char
    q-char-sequence q-char
  q-char
    informal: any member of the source character set except new-line and "
  pp-number
    digit
    "." digit
    pp-number digit
    pp-number identifier-nondigit
    pp-number "'" digit
    pp-number "'" nondigit
    pp-number "e" sign
    pp-number "E" sign
    pp-number "p" sign
    pp-number "P" sign
    pp-number "."
  identifier
    identifier-nondigit
    identifier identifier-nondigit
    identifier digit
  identifier-nondigit
    nondigit
    universal-character-name
  nondigit
    ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "_"]
  digit
    ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
  preprocessing-op-or-punc
    ["{", "}", "[", "]", "#", "##", "(", ")", "<:", ":>", "<%", "%>", "%:", "%:%:", ";", ":", "...", "new", "delete", "?", "::", ".", ".*", "+", "-", "*", "/", "%", "^", "&", "|", "~", "!", "=", "<", ">", "+=", "-=", "*=", "/=", "%=", "^=", "&=", "|=", "<<", ">>", ">>=", "<<=", "==", "!=", "<=", ">=", "&&", "||", "++", "--", ",", "->*", "->", "and", "and_eq", "bitand", "bitor", "compl", "not", "not_eq", "or", "or_eq", "xor", "xor_eq"]
  literal
    integer-literal
    character-literal
    floating-literal
    string-literal
    boolean-literal
    pointer-literal
    user-defined-literal
  integer-literal
    binary-literal integer-suffix_opt
    decimal-literal integer-suffix_opt
    octal-literal integer-suffix_opt
    hexadecimal-literal integer-suffix_opt
  binary-literal
    "0b" binary-digit
    "0B" binary-digit
    binary-literal "'"_opt binary-digit
  octal-literal
    "0"
    octal-literal "'"_opt octal-digit
  decimal-literal
    nonzero-digit
    decimal-literal "'"_opt digit
  hexadecimal-literal
    hexadecimal-prefix hexadecimal-digit-sequence
  binary-digit
    ["0", "1"]
  octal-digit
    ["0", "1", "2", "3", "4", "5", "6", "7"]
  nonzero-digit
    ["1", "2", "3", "4", "5", "6", "7", "8", "9"]
  hexadecimal-prefix
    ["0x", "0X"]
  hexadecimal-digit-sequence
    hexadecimal-digit
    hexadecimal-digit-sequence "'"_opt hexadecimal-digit
  hexadecimal-digit
    ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "A", "B", "C", "D", "E", "F"]
  integer-suffix
    unsigned-suffix long-suffix_opt
    unsigned-suffix long-long-suffix_opt
    long-suffix unsigned-suffix_opt
    long-long-suffix unsigned-suffix_opt
  unsigned-suffix
    ["u", "U"]
  long-suffix
    ["l", "L"]
  long-long-suffix
    ["ll", "LL"]
  character-literal
    encoding-prefix_opt "'" c-char-sequence "'"
  encoding-prefix
    ["u8", "u", "U", "L"]
  c-char-sequence
    c-char
    c-char-sequence c-char
  c-char
    informal: any member of the source character set except the single-quote ', backslash \, or new-line character
    escape-sequence
    universal-character-name
  escape-sequence
    simple-escape-sequence
    octal-escape-sequence
    hexadecimal-escape-sequence
  simple-escape-sequence
    ["\\'", "\\\"", "\\?", "\\\\", "\\a", "\\b", "\\f", "\\n", "\\r", "\\t", "\\v"]
  octal-escape-sequence
    "\\" octal-digit
    "\\" octal-digit octal-digit
    "\\" octal-digit octal-digit octal-digit
  hexadecimal-escape-sequence
    "\\x" hexadecimal-digit
    hexadecimal-escape-sequence hexadecimal-digit
  floating-literal
    decimal-floating-literal
    hexadecimal-floating-literal
  decimal-floating-literal
    fractional-constant exponent-part_opt floating-suffix_opt
    digit-sequence exponent-part floating-suffix_opt
  hexadecimal-floating-literal
    hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part floating-suffix_opt
    hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part floating-suffix_opt
  fractional-constant
    digit-sequence_opt "." digit-sequence
    digit-sequence "."
  hexadecimal-fractional-constant
    hexadecimal-digit-sequence_opt "." hexadecimal-digit-sequence
    hexadecimal-digit-sequence "."
  exponent-part
    "e" sign_opt digit-sequence
    "E" sign_opt digit-sequence
  binary-exponent-part
    "p" sign_opt digit-sequence
    "P" sign_opt digit-sequence
  sign
    ["+", "-"]
  digit-sequence
    digit
    digit-sequence "'"_opt digit
  floating-suffix
    ["f", "l", "F", "L"]
  string-literal
    encoding-prefix_opt "\"" s-char-sequence_opt "\""
    encoding-prefix_opt "R" raw-string
  s-char-sequence
    s-char
    s-char-sequence s-char
  s-char
    informal: any member of the source character set except the double-quote ", backslash \, or new-line character
    escape-sequence
    universal-character-name
  raw-string
    "\"" d-char-sequence_opt "(" r-char-sequence_opt ")" d-char-sequence_opt "\""
  r-char-sequence
    r-char
    r-char-sequence r-char
  r-char
    informal: "any member of the source character set, except a right parenthesis ) followed by the initial d-char-sequence (which may be empty) followed by a double quote ".
  d-char-sequence
    d-char
    d-char-sequence d-char
  d-char
    informal: any member of the basic source character set except: space, the left parenthesis (, the right parenthesis ), the backslash \, and the control characters representing horizontal tab, vertical tab, form feed, and newline.
  boolean-literal
    ["false", "true"]
  pointer-literal
    "nullptr"
  user-defined-literal
    user-defined-integer-literal
    user-defined-floating-literal
    user-defined-string-literal
    user-defined-character-literal
  user-defined-integer-literal
    decimal-literal ud-suffix
    octal-literal ud-suffix
    hexadecimal-literal ud-suffix
    binary-literal ud-suffix
  user-defined-floating-literal
    fractional-constant exponent-part_opt ud-suffix
    digit-sequence exponent-part ud-suffix
    hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-part ud-suffix
    hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part ud-suffix
  user-defined-string-literal
    string-literal ud-suffix
  user-defined-character-literal
    character-literal ud-suffix
  ud-suffix
    identifier
basic concepts
  translation-unit
    declaration-seq_opt
expressions
  primary-expression
    literal
    "this"
    "(" expression ")"
    id-expression
    lambda-expression
    fold-expression
    requires-expression
  id-expression
    unqualified-id
    qualified-id
  unqualified-id
    identifier
    operator-function-id
    conversion-function-id
    literal-operator-id
    "~" class-name
    "~" decltype-specifier
    template-id
  qualified-id
    nested-name-specifier "template"_opt unqualified-id
  nested-name-specifier
    "::"
    type-name "::"
    namespace-name "::"
    decltype-specifier "::"
    nested-name-specifier identifier "::"
    nested-name-specifier "template"_opt simple-template-id "::"
  lambda-expression
    lambda-introducer lambda-declarator_opt compound-statement
    lambda-introducer "<" template-parameter-list ">" lambda-declarator_opt compound-statement
  lambda-introducer
    "[" lambda-capture_opt "]"
  lambda-declarator
    "(" parameter-declaration-clause ")" decl-specifier-seq_opt noexcept-specifier_opt attribute-specifier-seq_opt trailing-return-type_opt
  lambda-capture
    capture-default
    capture-list
    capture-default "," capture-list
  capture-default
    "&"
    "="
  capture-list
    capture "..."_opt
    capture-list "," capture "..."_opt
  capture
    simple-capture
    init-capture
  simple-capture
    identifier
    "&" identifier
    "this"
    "*" "this"
  init-capture
    identifier initializer
    "&" identifier initializer
  fold-expression
    "(" cast-expression fold-operator "..." ")"
    "(" "..." fold-operator cast-expression ")"
    "(" cast-expression fold-operator "..." fold-operator cast-expression ")"
  fold-operator
    ["+", "-", "*"]
  requires-expression
    "requires" requirement-parameter-list_opt requirement-body
  requirement-parameter-list
    "(" parameter-declaration-clause_opt ")"
  requirement-body
    "{" requirement-seq "}"
  requirement-seq
    requirement
    requirement-seq requirement
  requirement
    simple-requirement
    type-requirement
    compound-requirement
    nested-requirement
  simple-requirement
    expression ";"
  type-requirement
    "typename" nested-name-specifier_opt type-name ";"
  compound-requirement
    "{" expression "}" "noexcept"_opt return-type-requirement_opt ";"
  return-type-requirement
    trailing-return-type
    "->" cv-qualifier-seq_opt constrained-parameter cv-qualifier-seq_opt abstract-declarator_opt
  nested-requirement
    "requires" constraint-expression ";"
  postfix-expression
    primary-expression
    postfix-expression "[" expr-or-braced-init-list "]"
    postfix-expression "(" expression-list_opt ")"
    simple-type-specifier "(" expression-list_opt ")"
    typename-specifier "(" expression-list_opt ")"
    simple-type-specifier braced-init-list
    typename-specifier braced-init-list
    postfix-expression "." "template"_opt id-expression
    postfix-expression "->" "template"_opt id-expression
    postfix-expression "." pseudo-destructor-name
    postfix-expression "->" pseudo-destructor-name
    postfix-expression "++"
    postfix-expression "--"
    "dynamic_cast" "<" type-id ">" "(" expression ")"
    "static_cast" "<" type-id ">" "(" expression ")"
    "reinterpret_cast" "<" type-id ">" "(" expression ")"
    "const_cast" "<" type-id ">" "(" expression ")"
    "typeid" "(" expression ")"
    "typeid" "(" type-id ")"
  expression-list
    initializer-list
  pseudo-destructor-name
    nested-name-specifier_opt type-name "::" "~" type-name
    nested-name-specifier "template" simple-template-id "::" "~" type-name
    "~" type-name
    "~" decltype-specifier
  unary-expression
    postfix-expression
    "++" cast-expression
    "--" cast-expression
    unary-operator cast-expression
    "sizeof" unary-expression
    "sizeof" "(" type-id ")"
    "sizeof" "..." "(" identifier ")"
    "alignof" "(" type-id ")"
    noexcept-expression
    new-expression
    delete-expression
  unary-operator
    ["*", "&", "+", "-", "!", "~"]
  new-expression
    "::"_opt "new" new-placement_opt new-type-id new-initializer_opt
    "::"_opt "new" new-placement_opt "(" type-id ")" new-initializer_opt
  new-placement
    "(" expression-list ")"
  new-type-id
    type-specifier-seq new-declarator_opt
  new-declarator
    ptr-operator new-declarator_opt
    noptr-new-declarator
  noptr-new-declarator
    "[" expression "]" attribute-specifier-seq_opt
    noptr-new-declarator "[" constant-expression "]" attribute-specifier-seq_opt
  new-initializer
    "(" expression-list_opt ")"
    braced-init-list
  delete-expression
    "::"_opt "delete" cast-expression
    "::"_opt "delete" "[" "]" cast-expression
  noexcept-expression
    "noexcept" "(" expression ")"
  cast-expression
    unary-expression
    "(" type-id ")" cast-expression
  pm-expression
    cast-expression
    pm-expression ".*" cast-expression
    pm-expression "->*" cast-expression
  multiplicative-expression
    pm-expression
    multiplicative-expression "*" pm-expression
    multiplicative-expression "/" pm-expression
    multiplicative-expression "%" pm-expression
  additive-expression
    multiplicative-expression
    additive-expression "+" multiplicative-expression
    additive-expression "-" multiplicative-expression
  shift-expression
    additive-expression
    shift-expression "<<" additive-expression
    shift-expression ">>" additive-expression
  relational-expression
    shift-expression
    relational-expression "<" shift-expression
    relational-expression ">" shift-expression
    relational-expression "<=" shift-expression
    relational-expression ">=" shift-expression
  equality-expression
    relational-expression
    equality-expression "==" relational-expression
    equality-expression "!=" relational-expression
  and-expression
    equality-expression
    and-expression "&" equality-expression
  exclusive-or-expression
    and-expression
    exclusive-or-expression "^" and-expression
  inclusive-or-expression
    exclusive-or-expression
    inclusive-or-expression "|" exclusive-or-expression
  logical-and-expression
    inclusive-or-expression
    logical-and-expression "&&" inclusive-or-expression
  logical-or-expression
    logical-and-expression
    logical-or-expression "||" logical-and-expression
  conditional-expression
    logical-or-expression
    logical-or-expression "?" expression ":" assignment-expression
  throw-expression
    "throw" assignment-expression_opt
  assignment-expression
    conditional-expression
    logical-or-expression assignment-operator assignment-expression
    throw-expression
  assignment-operator
    ["=", "*=", "/=", "%=", "+=", "-=", ">>=", "<<=", "&=", "^=", "|="]
  expression
    assignment-expression
    expression "," assignment-expression
  constant-expression
    conditional-expression
statements
  statement
    labeled-statement
    attribute-specifier-seq_opt expression-statement
    attribute-specifier-seq_opt compound-statement
    attribute-specifier-seq_opt selection-statement
    attribute-specifier-seq_opt iteration-statement
    attribute-specifier-seq_opt jump-statement
    declaration-statement
    attribute-specifier-seq_opt try-block
  init-statement
    expression-statement
    simple-declaration
  condition
    expression
    attribute-specifier-seq_opt decl-specifier-seq declarator brace-or-equal-initializer
  labeled-statement
    attribute-specifier-seq_opt identifier ":" statement
    attribute-specifier-seq_opt "case" constant-expression ":" statement
    attribute-specifier-seq_opt "default" ":" statement
  expression-statement
    expression_opt ";"
  compound-statement
    "{" statement-seq_opt "}"
  statement-seq
    statement
    statement-seq statement
  selection-statement
    "if" "constexpr"_opt "(" condition ")" statement
    "if" "constexpr"_opt "(" condition ")" statement "else" statement
    "switch" "(" init-statement_opt condition ")" statement
  iteration-statement
    "while" "(" condition ")" statement
    "do" statement "while" "(" expression ")" ";"
    "for" "(" init-statement condition_opt ";" expression_opt ")" statement
    "for" "(" for-range-declaration ":" for-range-initializer ")" statement
  for-range-declaration
    attribute-specifier-seq_opt decl-specifier-seq declarator
    attribute-specifier-seq_opt decl-specifier-seq ref-qualifier_opt "[" identifier-list "]"
  for-range-initializer
    expr-or-braced-init-list
  jump-statement
    "break" ";"
    "continue" ";"
    "return" expr-or-braced-init-list_opt ";"
    "goto" identifier ";"
  declaration-statement
    block-declaration
declarations
  declaration-seq
    declaration
    declaration-seq declaration
  declaration
    block-declaration
    nodeclspec-function-declaration
    function-definition
    template-declaration
    deduction-guide
    explicit-instantiation
    explicit-specialization
    linkage-specification
    namespace-definition
    empty-declaration
    attribute-declaration
  block-declaration
    simple-declaration
    asm-definition
    namespace-alias-definition
    using-declaration
    using-directive
    static-assert-declaration
    alias-declaration
    opaque-enum-declaration
  nodeclspec-function-declaration
    attribute-specifier-seq_opt declarator ";"
  alias-declaration
    "using" identifier attribute-specifier-seq_opt "=" defining-type-id ";"
  simple-declaration
    decl-specifier-seq init-declarator-list_opt ";"
    attribute-specifier-seq decl-specifier-seq_opt init-declarator-list ";"
    attribute-specifier-seq_opt decl-specifier-seq ref-qualifier_opt "[" identifier-list "]" initializer ";"
  static-assert-declaration
    "static_assert" "(" constant-expression ")" ";"
    "static_assert" "(" constant-expression "," string-literal ")" ";"
  empty-declaration
    ";"
  attribute-declaration
    attribute-specifier-seq ";"
  decl-specifier
    storage-class-specifier
    defining-type-specifier
    function-specifier
    "friend"
    "typedef"
    "constexpr"
    "inline"
  decl-specifier-seq
    decl-specifier attribute-specifier-seq_opt
    decl-specifier decl-specifier-seq
  storage-class-specifier
    "static"
    "thread_local"
    "extern"
    "mutable"
  function-specifier
    "virtual"
    "explicit"
  typedef-name
    identifier
  type-specifier
    simple-type-specifier
    elaborated-type-specifier
    typename-specifier
    cv-qualifier
  type-specifier-seq
    type-specifier attribute-specifier-seq_opt
    type-specifier type-specifier-seq
  defining-type-specifier
    type-specifier
    class-specifier
    enum-specifier
  defining-type-specifier-seq
    defining-type-specifier attribute-specifier-seq_opt
    defining-type-specifier defining-type-specifier-seq
  simple-type-specifier
    nested-name-specifier_opt type-name
    nested-name-specifier "template" simple-template-id
    nested-name-specifier_opt template-name
    ["char", "char16_t", "char32_t", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void", "auto"]
    decltype-specifier
  type-name
    class-name
    enum-name
    typedef-name
    simple-template-id
  decltype-specifier
    "decltype" "(" expression ")"
    "decltype" "(" "auto" ")"
  elaborated-type-specifier
    class-key attribute-specifier-seq_opt nested-name-specifier_opt identifier
    class-key simple-template-id
    class-key nested-name-specifier_opt "template"_opt simple-template-id
    "enum" nested-name-specifier_opt identifier
  enum-name
    identifier
  enum-specifier
    enum-head "{" enumerator-list_opt "}"
    enum-head "{" enumerator-list "," "}"
  enum-head
    enum-key attribute-specifier-seq_opt enum-head-name_opt enum-base_opt
  enum-head-name
    nested-name-specifier_opt identifier
  opaque-enum-declaration
    enum-key attribute-specifier-seq_opt nested-name-specifier_opt identifier enum-base_opt ";"
  enum-key
    "enum"
    "enum" "class"
    "enum" "struct"
  enum-base
    ":" type-specifier-seq
  enumerator-list
    enumerator-definition
    enumerator-list "," enumerator-definition
  enumerator-definition
    enumerator
    enumerator "=" constant-expression
  enumerator
    identifier attribute-specifier-seq_opt
  namespace-name
    identifier
    namespace-alias
  namespace-definition
    named-namespace-definition
    unnamed-namespace-definition
    nested-namespace-definition
  named-namespace-definition
    "inline"_opt "namespace" attribute-specifier-seq_opt identifier "{" namespace-body "}"
  unnamed-namespace-definition
    "inline"_opt "namespace" attribute-specifier-seq_opt "{" namespace-body "}"
  nested-namespace-definition
    "namespace" enclosing-namespace-specifier "::" identifier "{" namespace-body "}"
  enclosing-namespace-specifier
    identifier
    enclosing-namespace-specifier "::" identifier
  namespace-body
    declaration-seq_opt
  namespace-alias
    identifier
  namespace-alias-definition
    "namespace" identifier "=" qualified-namespace-specifier ";"
  qualified-namespace-specifier
    nested-name-specifier_opt namespace-name
  using-declaration
    "using" using-declarator-list ";"
  using-declarator-list
    using-declarator "..."_opt
    using-declarator-list "," using-declarator "..."_opt
  using-declarator
    "typename"_opt nested-name-specifier unqualified-id
  using-directive
    attribute-specifier-seq_opt "using" "namespace" nested-name-specifier_opt namespace-name ";"
  asm-definition
    attribute-specifier-seq_opt "asm" "(" string-literal ")" ";"
  linkage-specification
    "extern" string-literal "{" declaration-seq_opt "}"
    "extern" string-literal declaration
  attribute-specifier-seq
    attribute-specifier-seq_opt attribute-specifier
  attribute-specifier
    "[" "[" attribute-using-prefix_opt attribute-list "]" "]"
    alignment-specifier
  alignment-specifier
    "alignas" "(" type-id "..."_opt ")"
    "alignas" "(" constant-expression "..."_opt ")"
  attribute-using-prefix
    "using" attribute-namespace ":"
  attribute-list
    attribute_opt
    attribute-list "," attribute_opt
    attribute "..."
    attribute-list "," attribute "..."
  attribute
    attribute-token attribute-argument-clause_opt
  attribute-token
    identifier
    attribute-scoped-token
  attribute-scoped-token
    attribute-namespace "::" identifier
  attribute-namespace
    identifier
  attribute-argument-clause
    "(" balanced-token-seq_opt ")"
  balanced-token-seq
    balanced-token_opt
    balanced-token-seq balanced-token
  balanced-token
    "(" balanced-token-seq ")"
    "[" balanced-token-seq "]"
    "{" balanced-token-seq "}"
    informal: any token other than a parenthesis, a bracket, or a brace
declarators
  init-declarator-list
    init-declarator
    init-declarator-list "," init-declarator
  init-declarator
    declarator initializer_opt
  declarator
    ptr-declarator
    noptr-declarator parameters-and-qualifiers trailing-return-type
  ptr-declarator
    noptr-declarator
    ptr-operator ptr-declarator
  noptr-declarator
    declarator-id attribute-specifier-seq_opt
    noptr-declarator parameters-and-qualifiers
    noptr-declarator "[" constant-expression_opt "]" attribute-specifier-seq_opt
    "(" ptr-declarator ")"
  parameters-and-qualifiers
    "(" parameter-declaration-clause ")" cv-qualifier-seq_opt ref-qualifier_opt noexcept-specifier_opt attribute-specifier-seq_opt
  trailing-return-type
    "->" type-id
  ptr-operator
    "*" attribute-specifier-seq_opt cv-qualifier-seq_opt
    "&" attribute-specifier-seq_opt
    "&&" attribute-specifier-seq_opt
    nested-name-specifier "*" attribute-specifier-seq_opt cv-qualifier-seq_opt
  cv-qualifier-seq
    cv-qualifier cv-qualifier-seq_opt
  cv-qualifier
    "const"
    "volatile"
  ref-qualifier
    ["&", "&&"]
  declarator-id
    "..."_opt id-expression
  type-id
    type-specifier-seq abstract-declarator_opt
  defining-type-id
    defining-type-specifier-seq abstract-declarator_opt
  abstract-declarator
    ptr-abstract-declarator
    noptr-abstract-declarator_opt parameters-and-qualifiers trailing-return-type
    abstract-pack-declarator
  ptr-abstract-declarator
    noptr-abstract-declarator
    ptr-operator ptr-abstract-declarator_opt
  noptr-abstract-declarator
    noptr-abstract-declarator_opt parameters-and-qualifiers
    noptr-abstract-declarator_opt "[" constant-expression_opt "]" attribute-specifier-seq_opt
    "(" ptr-abstract-declarator ")"
  abstract-pack-declarator
    noptr-abstract-pack-declarator
    ptr-operator abstract-pack-declarator
  noptr-abstract-pack-declarator
    noptr-abstract-pack-declarator parameters-and-qualifiers
    noptr-abstract-pack-declarator "[" constant-expression_opt "]" attribute-specifier-seq_opt
    "..."
  parameter-declaration-clause
    parameter-declaration-list_opt "..."_opt
    parameter-declaration-list "," "..."
  parameter-declaration-list
    parameter-declaration
    parameter-declaration-list "," parameter-declaration
  parameter-declaration
    attribute-specifier-seq_opt decl-specifier-seq declarator
    attribute-specifier-seq_opt decl-specifier-seq declarator "=" initializer-clause
    attribute-specifier-seq_opt decl-specifier-seq abstract-declarator_opt
    attribute-specifier-seq_opt decl-specifier-seq abstract-declarator_opt "=" initializer-clause
  function-definition
    attribute-specifier-seq_opt decl-specifier-seq_opt declarator virt-specifier-seq_opt function-body
    attribute-specifier-seq_opt decl-specifier-seq_opt declarator requires-clause function-body
  function-body
    ctor-initializer_opt compound-statement
    function-try-block
    "=" "default" ";"
    "=" "delete" ";"
  initializer
    brace-or-equal-initializer
    "(" expression-list ")"
  brace-or-equal-initializer
    "=" initializer-clause
    braced-init-list
  initializer-clause
    assignment-expression
    braced-init-list
  braced-init-list
    "{" initializer-list ","_opt "}"
    "{" designated-initializer-list ","_opt "}"
    "{" "}"
  initializer-list
    initializer-clause "..."_opt
    initializer-list "," initializer-clause "..."_opt
  designated-initializer-list
    designated-initializer-clause
    designated-initializer-list "," designated-initializer-clause
  designated-initializer-clause
    designator brace-or-equal-initializer
  designator
    "." identifier
  expr-or-braced-init-list
    expression
    braced-init-list
classes
  class-name
    identifier
    simple-template-id
  class-specifier
    class-head "{" member-specification_opt "}"
  class-head
    class-key attribute-specifier-seq_opt class-head-name class-virt-specifier_opt base-clause_opt
    class-key attribute-specifier-seq_opt base-clause_opt
  class-head-name
    nested-name-specifier_opt class-name
  class-virt-specifier
    "final"
  class-key
    "class"
    "struct"
    "union"
  member-specification
    member-declaration member-specification_opt
    access-specifier ":" member-specification_opt
  member-declaration
    attribute-specifier-seq_opt decl-specifier-seq_opt member-declarator-list_opt ";"
    function-definition ";"_opt
    using-declaration
    static-assert-declaration
    template-declaration
    deduction-guide
    alias-declaration
    empty-declaration
  member-declarator-list
    member-declarator
    member-declarator-list "," member-declarator
  member-declarator
    declarator virt-specifier-seq_opt pure-specifier_opt
    declarator requires-clause
    declarator brace-or-equal-initializer_opt
    identifier_opt attribute-specifier-seq_opt ":" constant-expression brace-or-equal-initializer_opt
  virt-specifier-seq
    virt-specifier
    virt-specifier-seq virt-specifier
  virt-specifier
    "override"
    "final"
  pure-specifier
    "=" "0"
derived classes
  base-clause
    ":" base-specifier-list
  base-specifier-list
    base-specifier "..."_opt
    base-specifier-list "," base-specifier "..."_opt
  base-specifier
    attribute-specifier-seq_opt class-or-decltype
    attribute-specifier-seq_opt "virtual" access-specifier_opt class-or-decltype
    attribute-specifier-seq_opt access-specifier "virtual"_opt class-or-decltype
  class-or-decltype
    nested-name-specifier_opt class-name
    nested-name-specifier "template" simple-template-id
    decltype-specifier
  access-specifier
    "private"
    "protected"
    "public"
special member functions
  conversion-function-id
    "operator" conversion-type-id
  conversion-type-id
    type-specifier-seq conversion-declarator_opt
  conversion-declarator
    ptr-operator conversion-declarator_opt
  ctor-initializer
    ":" mem-initializer-list
  mem-initializer-list
    mem-initializer "..."_opt
    mem-initializer "," mem-initializer-list "..."_opt
  mem-initializer
    mem-initializer-id "(" expression-list_opt ")"
    mem-initializer-id braced-init-list
  mem-initializer-id
    class-or-decltype
    identifier
overloading
  operator-function-id
    "operator" operator
  operator
    ["new", "delete", "new[]", "delete[]", "+", "-", "*", "/", "%", "^", "&", "|", "~", "!", "=", "<", ">", "+=", "-=", "*=", "/=", "%=", "^=", "&=", "|=", "<<", ">>", ">>=", "<<=", "==", "!=", "<=", ">=", "&&", "||", "++", "--", ",", "->*", "->", "()", "[]"]
  literal-operator-id
    "operator" string-literal identifier
    "operator" user-defined-string-literal
templates
  template-declaration
    template-head declaration
    template-head concept-definition
  template-head
    "template" "<" template-parameter-list ">" requires-clause_opt
  template-parameter-list
    template-parameter
    template-parameter-list "," template-parameter
  requires-clause
    "requires" constraint-logical-or-expression
  constraint-logical-or-expression
    constraint-logical-and-expression
    constraint-logical-or-expression "||" constraint-logical-and-expression
  constraint-logical-and-expression
    primary-expression
    constraint-logical-and-expression "&&" primary-expression
  concept-definition
    "concept" concept-name "=" constraint-expression ";"
  concept-name
    identifier
  template-parameter
    type-parameter
    parameter-declaration
    constrained-parameter
  type-parameter
    type-parameter-key "..."_opt identifier_opt
    type-parameter-key identifier_opt "=" type-id
    "template" "<" template-parameter-list ">" type-parameter-key "..."_opt identifier_opt
    "template" "<" template-parameter-list ">" type-parameter-key identifier_opt "=" id-expression
  type-parameter-key
    "class"
    "typename"
  constrained-parameter
    qualified-concept-name "..." identifier_opt
    qualified-concept-name identifier_opt default-template-argument_opt
  qualified-concept-name
    nested-name-specifier_opt concept-name
    nested-name-specifier_opt partial-concept-id
  partial-concept-id
    concept-name "<" template-argument-list_opt ">"
  default-template-argument
    "=" type-id
    "=" id-expression
    "=" initializer-clause
  simple-template-id
    template-name "<" template-argument-list_opt ">"
  template-id
    simple-template-id
    operator-function-id "<" template-argument-list_opt ">"
    literal-operator-id "<" template-argument-list_opt ">"
  template-name
    identifier
  template-argument-list
    template-argument "..."_opt
    template-argument-list "," template-argument "..."_opt
  template-argument
    constant-expression
    type-id
    id-expression
  constraint-expression
    logical-or-expression
  typename-specifier
    "typename" nested-name-specifier identifier
    "typename" nested-name-specifier "template"_opt simple-template-id
  explicit-instantiation
    "extern"_opt "template" declaration
  explicit-specialization
    "template" "<" ">" declaration
  deduction-guide
    "explicit"_opt template-name "(" parameter-declaration-clause ")" "->" simple-template-id ";"
exception handling
  try-block
    "try" compound-statement handler-seq
  function-try-block
    "try" ctor-initializer_opt compound-statement handler-seq
  handler-seq
    handler handler-seq_opt
  handler
    "catch" "(" exception-declaration ")" compound-statement
  exception-declaration
    attribute-specifier-seq_opt type-specifier-seq declarator
    attribute-specifier-seq_opt type-specifier-seq abstract-declarator_opt
    "..."
  noexcept-specifier
    "noexcept" "(" constant-expression ")"
    "noexcept"
    "throw" "(" ")"
preprocessing directives
  preprocessing-file
    group_opt
  group
    group-part
    group group-part
  group-part
    control-line
    if-section
    text-line
    "#" conditionally-supported-directive
  control-line
    "#" "include" pp-tokens new-line
    "#" "define" identifier replacement-list new-line
    "#" "define" identifier lparen identifier-list_opt ")" replacement-list new-line
    "#" "define" identifier lparen "..." ")" replacement-list new-line
    "#" "define" identifier lparen identifier-list "," "..." ")" replacement-list new-line
    "#" "undef" identifier new-line
    "#" "line" pp-tokens new-line
    "#" "error" pp-tokens_opt new-line
    "#" "pragma" pp-tokens_opt new-line
    "#" new-line
  if-section
    if-group elif-groups_opt else-group_opt endif-line
  if-group
    "#" "if" constant-expression new-line group_opt
    "#" "ifdef" identifier new-line group_opt
    "#" "ifndef" identifier new-line group_opt
  elif-groups
    elif-group
    elif-groups elif-group
  elif-group
    "#" "elif" constant-expression new-line group_opt
  else-group
    "#" "else" new-line group_opt
  endif-line
    "#" "endif" new-line
  text-line
    pp-tokens_opt new-line
  conditionally-supported-directive
    pp-tokens new-line
  lparen
    informal: a ( character not immediately preceded by white-space
  identifier-list
    identifier
    identifier-list "," identifier
  replacement-list
    pp-tokens_opt
  pp-tokens
    preprocessing-token
    pp-tokens preprocessing-token
  new-line
    informal: the new-line character
  defined-macro-expression
    "defined" identifier
    "defined" "(" identifier ")"
  h-preprocessing-token
    informal: any preprocessing-token other than >
  h-pp-tokens
    h-preprocessing-token
    h-pp-tokens h-preprocessing-token
  has-include-expression
    "__has_include" "(" "<" h-char-sequence ">" ")"
    "__has_include" "(" "\"" q-char-sequence "\"" ")"
    "__has_include" "(" string-literal ")"
    "__has_include" "(" "<" h-pp-tokens ">" ")"
